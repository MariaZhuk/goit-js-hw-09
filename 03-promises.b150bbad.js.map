{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAkCyB,SAAdC,EAAcC,EAAUC,GAE/B,MAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAG4D,SAA7DC,GACrBA,EAAMC,iBAM+C,IAAjDC,EAAQC,OAAOH,EAAMI,OAAOC,SAAShB,MAAMiB,OAE3CC,EAAOJ,OAAOH,EAAMI,OAAOC,SAASE,KAAKD,OACzCE,EAASL,OAAOH,EAAMI,OAAOC,SAASG,OAAOF,OAEjD,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAElBtB,EAArBsB,EAAUP,GACrBQ,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAqBzB,QAAiBC,MAAU,IAEzEyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBsB,EAAA1B,GAAS2B,OAAOG,QAAQ,sBAAoB3B,QAAiBC,MAAU,IAE3Ea,GAASK,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n \nconst formEl = document.querySelector(\".form\");\n\nformEl.addEventListener(\"submit\", handlerSubmit);\n\n// функція зчитування внесенних значень у інпути та відображення по дії сабміту результатів промісу\nfunction handlerSubmit(event) {\n  event.preventDefault(); // відмінили дію по замовченню - перезавантаження сторінки\n  \n  // збираємо джанні з інпутів(звертаємося до псевдомасиву який створюється по дії відправлення данних внесенних у інпути )\n  //event.target - те що внесли у інпути\n  //elements - псевдомасив(який зберігає данні які є у інпуті у вигляді масиву)\n  \n  let delay = Number(event.target.elements.delay.value);\n \n  let step = Number(event.target.elements.step.value);\n  let amount = Number(event.target.elements.amount.value)\n  \n  for (let position = 1; position <= amount; position += 1) {\n   //виклик функції створення функції у циклу\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n}\n\n// Функція створення промісу\n  function createPromise(position, delay) {\n   \n    const shouldResolve = Math.random() > 0.3;\n   \n    const promise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n    return promise;//повернення промису\n  }\n   \n\n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delay1","Number","target","elements","value","step","amount","position1","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.b150bbad.js.map"}