{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,QAASC,SAASC,cAAc,qBAChCC,OAAQF,SAASC,cAAc,oBAC/BE,SAAUH,SAASC,cAAc,sBACjCG,OAAQJ,SAASC,cAAc,UAsChC,SAASI,EAAcC,EAAUC,GAE9B,MAAMC,EAAgBC,KAAKC,SAAW,GASxC,OAPkB,IAAIC,SAAQ,CAACC,EAASC,KAClCL,EACFI,EAAQ,C,SAACN,E,MAAUC,IAEnBM,EAAO,C,SAACP,E,MAAUC,GAAO,GAEzBA,E,CA7CNT,EAAKM,OAAOU,iBAAiB,UAE7B,SAAuBC,GACrBA,EAAMC,iBACN,IAAIC,EAAQC,OAAOpB,EAAKC,QAAQoB,OAC5BC,EAAOF,OAAOpB,EAAKI,OAAOiB,OAC1BE,EAASH,OAAOpB,EAAKK,SAASgB,OAGlC,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACpC,IAAbA,GACDC,YAAW,KACVlB,EAAciB,EAAUL,GACrBO,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAEzEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoBvB,QAAiBC,MAAU,GACvE,GACHU,GAEDK,EAAW,GACbC,YAAW,KACTN,GAASG,EACTf,EAAciB,EAAUL,GACrBO,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqBrB,QAAiBC,MAAU,IAEzEqB,OAAM,EAACtB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoBvB,QAAeC,MAAU,GACrE,GACHU,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delayEl: document.querySelector(\"input[data-delay]\"),\n  stepEl: document.querySelector(\"input[data-step]\"),\n  amountEl: document.querySelector(\"input[data-amount]\"),\n  formEl: document.querySelector(\".form\"),\n}\n\nrefs.formEl.addEventListener(\"submit\", handlerSubmit);\n\nfunction handlerSubmit(event) { \n  event.preventDefault();\n  let delay = Number(refs.delayEl.value);\n  let step = Number(refs.stepEl.value);\n  let amount = Number(refs.amountEl.value);\n\n  \n  for (let position = 1; position <= amount; position += 1) { \n    if (position === 1) { \n       setTimeout(() => {\n        createPromise(position, delay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          });\n      }, delay)\n    }\n    if (position > 1) {\n      setTimeout(() => {\n        delay += step;\n        createPromise(position, delay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          });\n      }, delay)\n    } \n    }\n  }\n function createPromise(position, delay) {\n   \n    const shouldResolve = Math.random() > 0.3;\n   \n    const promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({position, delay});\n    } else {\n      reject({position, delay});\n    }\n   }, delay);\n  return promise;\n    \n   }\n   \n  \n\n\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","delayEl","document","querySelector","stepEl","amountEl","formEl","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.474f6571.js.map"}